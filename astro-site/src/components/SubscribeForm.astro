---
interface Props {
  path: string;
}
const { path } = Astro.props;

const baseUrl = import.meta.env.DEV ? 'http://localhost:8787' : 'https://api.miquelpuigturon.com';

// Generate path hierarchy options
function generatePathOptions(fullPath: string): Array<{ value: string; label: string }> {
  const segments = fullPath.split('/').filter(Boolean);
  const options: Array<{ value: string; label: string }> = [
    { value: '/', label: '/ (root - all updates)' }
  ];

  let currentPath = '';
  for (const segment of segments) {
    currentPath += '/' + segment;
    options.push({ value: currentPath, label: currentPath });
  }

  return options;
}

// Determine default path based on current location
function getDefaultPath(fullPath: string): string {
  const segments = fullPath.split('/').filter(Boolean);

  // If at root or first level, use current path
  if (segments.length <= 1) {
    return '/' + (segments[0] ?? '');
  }
  
  // Otherwise, use second level
  return '/' + segments.slice(0, 2).join('/');
}

const pathOptions = generatePathOptions(path);
const defaultPath = getDefaultPath(path);
---

<div class="subscribe-container">
  <div class="subscribe-header">
    <h3>Subscribe to Updates</h3>
    <button 
      type="button" 
      class="help-button" 
      id="help-button"
      aria-label="How subscriptions work"
      title="How subscriptions work"
    >
      ?
    </button>
  </div>
  
  <div class="path-selector-container" data-default-path={defaultPath}>
    <p class="subscribe-description">
      Get notified for updates in <strong id="path-selector-trigger" class="path-trigger" role="button" tabindex="0" aria-label="Click to select path"><span id="selected-path-display">{defaultPath}</span><svg class="dropdown-icon" width="12" height="12" viewBox="0 0 12 12" fill="currentColor" aria-hidden="true"><path d="M6 8L2 4h8z"/></svg></strong> or any subpaths.
    </p>

    <div class="path-selector-dropdown" id="path-selector-dropdown" role="listbox" aria-label="Select path to subscribe to">
      {pathOptions.map(option => (
        <button
          type="button"
          class:list={['path-option', { selected: option.value === defaultPath }]}
          data-path={option.value}
          role="option"
        >
          {option.label}
        </button>
      ))}
    </div>
  </div>
  
  <form id="subscribe-form" class="subscribe-form" method="post" data-base-url={baseUrl}>
    <input 
      type="email" 
      id="email-input"
      name="email" 
      placeholder="your@email.com" 
      required 
      aria-label="Email address"
      class="email-input"
    />
    <button type="submit" id="subscribe-button" class="subscribe-button">
      Subscribe
    </button>
  </form>
  
  <div id="subscribe-message" class="subscribe-message message" role="alert" aria-live="polite"></div>
</div>

<!-- Modal -->
<div id="subscribe-modal" class="subscribe-modal modal" role="dialog" aria-labelledby="modal-title" aria-hidden="true">
  <div class="modal-overlay" id="modal-overlay"></div>
  <div class="modal-content">
    <div class="modal-header">
      <h2 id="modal-title">How Subscriptions Work</h2>
      <button type="button" class="modal-close" id="modal-close" aria-label="Close modal">&times;</button>
    </div>
    
    <div class="modal-body">
      <section>
        <h3>ðŸ“§ What happens when you subscribe?</h3>
        <p>Your email is encrypted and stored securely in a Cloudflare D1 database associated with the specific path you're subscribing to.</p>
      </section>

      <section>
        <h3>ðŸŒ³ Hierarchical subscriptions</h3>
        <p>Subscriptions follow a path-based system. If you subscribe to <code>/work</code>, you'll be notified about:</p>
        <ul>
          <li>Changes to <code>/work</code> itself</li>
          <li>Changes to <code>/work/temporal</code></li>
          <li>Changes to <code>/work/temporal/scaling-workers</code></li>
          <li>Any other pages under <code>/work</code></li>
        </ul>
        <p>But you won't be notified about changes to <code>/health</code> or <code>/social</code>.</p>
      </section>

      <section>
        <h3>ðŸ“¬ Multiple subscriptions</h3>
        <p>You can subscribe to multiple paths with the same email.</p>
      </section>

      <section>
        <h3>ðŸ”’ Privacy & storage</h3>
        <p>Your email is encrypted and stored in a Cloudflare D1 database. Only used for sending notifications.</p>
      </section>

      <section>
        <h3>ðŸ“¨ When will I receive emails?</h3>
        <p>You'll receive an email when new content is published or significantly updated in your subscribed path.</p>
      </section>

      <section>
        <h3>ðŸš« Unsubscribing</h3>
        <p>Email me at <a href="mailto:miquel@miquelpuigturon.com">miquel@miquelpuigturon.com</a> if you no longer want notifications.</p>
      </section>
    </div>
  </div>
</div>


<style>
  .subscribe-container {
    margin: 0;
    padding: 0;
  }

  .subscribe-header {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    margin-bottom: 0.5rem;
  }

  .subscribe-header h3 {
    margin: 0;
    font-size: 1.1rem;
    color: #333;
    font-weight: 600;
  }

  .help-button {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: 20px;
    height: 20px;
    border-radius: 50%;
    background-color: #0066cc;
    color: white;
    border: none;
    font-size: 0.75rem;
    font-weight: bold;
    cursor: pointer;
    transition: background-color 0.2s, transform 0.2s;
    line-height: 1;
    padding: 0;
  }

  .help-button:hover {
    background-color: #0052a3;
    transform: scale(1.1);
  }

  .path-selector-container {
    position: relative;
    margin-bottom: 1rem;
  }

  .subscribe-description {
    margin: 0;
    font-size: 0.85rem;
    color: #666;
    line-height: 1.4;
  }

  .path-trigger {
    color: #0066cc;
    font-family: monospace;
    font-size: 0.9em;
    cursor: pointer;
    padding: 0.1rem 0.25rem;
    border-radius: 3px;
    transition: background-color 0.2s;
    word-break: break-word;
    overflow-wrap: break-word;
    user-select: none;
  }

  .path-trigger:hover {
    background-color: rgba(0, 102, 204, 0.1);
  }

  .path-trigger:focus {
    outline: 2px solid #0066cc;
    outline-offset: 2px;
    background-color: rgba(0, 102, 204, 0.1);
  }

  .dropdown-icon {
    display: inline;
    vertical-align: baseline;
    margin-left: 0.2em;
    transition: transform 0.2s;
  }

  .path-trigger.open .dropdown-icon {
    transform: rotate(180deg);
  }

  .path-selector-dropdown {
    display: none;
    position: absolute;
    top: 100%;
    left: 0;
    right: 0;
    margin-top: 0.5rem;
    background: white;
    border: 1px solid #d0d0d0;
    border-radius: 6px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    max-height: 250px;
    overflow-y: auto;
    z-index: 100;
  }

  .path-selector-dropdown.show {
    display: block;
  }

  .path-selector-dropdown.show-upward {
    top: auto;
    bottom: 100%;
    margin-top: 0;
    margin-bottom: 0.5rem;
  }

  .path-option {
    display: block;
    width: 100%;
    padding: 0.65rem 0.85rem;
    text-align: left;
    background: none;
    border: none;
    border-bottom: 1px solid #f0f0f0;
    cursor: pointer;
    font-family: monospace;
    font-size: 0.85rem;
    color: #333;
    transition: background-color 0.15s;
  }

  .path-option:last-child {
    border-bottom: none;
  }

  .path-option:hover {
    background-color: #f5f5f5;
  }

  .path-option:focus {
    outline: none;
    background-color: rgba(0, 102, 204, 0.1);
  }

  .path-option.selected {
    background-color: rgba(0, 102, 204, 0.15);
    color: #0066cc;
    font-weight: 600;
  }

  form {
    display: flex;
    gap: 0.5rem;
    flex-wrap: nowrap;
    background: white;
    border: 1px solid #d0d0d0;
    border-radius: 6px;
    padding: 4px;
    transition: border-color 0.2s, box-shadow 0.2s;
  }

  form:focus-within {
    border-color: #0066cc;
    box-shadow: 0 0 0 3px rgba(0, 102, 204, 0.1);
  }

  input[type="email"] {
    flex: 1;
    min-width: 0;
    padding: 0.6rem 0.75rem;
    border: none;
    background: transparent;
    font-size: 0.95rem;
    color: #333;
  }

  input[type="email"]::placeholder {
    color: #999;
  }

  input[type="email"]:focus {
    outline: none;
  }

  input[type="email"]:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }

  #subscribe-button {
    padding: 0.6rem 1.25rem;
    background-color: #0066cc;
    color: white;
    border: none;
    border-radius: 4px;
    font-size: 0.9rem;
    font-weight: 600;
    cursor: pointer;
    transition: background-color 0.2s, transform 0.1s;
    white-space: nowrap;
  }

  #subscribe-button:hover:not(:disabled) {
    background-color: #0052a3;
  }

  #subscribe-button:active:not(:disabled) {
    transform: scale(0.98);
  }

  #subscribe-button:disabled {
    background-color: #6c757d;
    cursor: not-allowed;
  }

  .message {
    margin-top: 0.75rem;
    padding: 0.65rem 0.85rem;
    border-radius: 4px;
    font-size: 0.85rem;
    display: none;
    line-height: 1.4;
  }

  .message.show {
    display: block;
  }

  .message.success {
    background-color: #d4edda;
    color: #155724;
    border: 1px solid #c3e6cb;
  }

  .message.error {
    background-color: #f8d7da;
    color: #721c24;
    border: 1px solid #f5c6cb;
  }

  /* Modal Styles */
  .modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    z-index: 1000;
  }

  .modal.show {
    display: block;
  }

  .modal-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0, 0, 0, 0.5);
    backdrop-filter: blur(2px);
  }

  .modal-content {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background: white;
    border-radius: 12px;
    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
    max-width: 600px;
    width: 90%;
    max-height: 85vh;
    overflow-y: auto;
    animation: modalSlideIn 0.3s ease-out;
  }

  @keyframes modalSlideIn {
    from {
      opacity: 0;
      transform: translate(-50%, -45%);
    }
    to {
      opacity: 1;
      transform: translate(-50%, -50%);
    }
  }

  .modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1.5rem 2rem;
    border-bottom: 1px solid #e0e0e0;
    position: sticky;
    top: 0;
    background: white;
    border-radius: 12px 12px 0 0;
  }

  .modal-header h2 {
    margin: 0;
    font-size: 1.5rem;
    color: #333;
  }

  .modal-close {
    background: none;
    border: none;
    font-size: 2rem;
    line-height: 1;
    color: #666;
    cursor: pointer;
    padding: 0;
    width: 32px;
    height: 32px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 4px;
    transition: background-color 0.2s, color 0.2s;
  }

  .modal-close:hover {
    background-color: #f0f0f0;
    color: #333;
  }

  .modal-body {
    padding: 2rem;
  }

  .modal-body section {
    margin-bottom: 2rem;
  }

  .modal-body section:last-child {
    margin-bottom: 0;
  }

  .modal-body h3 {
    margin: 0 0 0.75rem 0;
    font-size: 1.1rem;
    color: #333;
  }

  .modal-body p {
    margin: 0 0 0.75rem 0;
    line-height: 1.6;
    color: #555;
  }

  .modal-body p:last-child {
    margin-bottom: 0;
  }

  .modal-body code {
    background-color: #f5f5f5;
    padding: 0.2em 0.4em;
    border-radius: 3px;
    font-family: monospace;
    font-size: 0.9em;
    color: #0066cc;
  }

  .modal-body ul {
    margin: 0.5rem 0;
    padding-left: 1.5rem;
  }

  .modal-body li {
    margin: 0.5rem 0;
    line-height: 1.6;
    color: #555;
  }

  @media (max-width: 640px) {
    form {
      flex-direction: column;
      padding: 6px;
    }

    input[type="email"] {
      padding: 0.75rem;
    }

    #subscribe-button {
      width: 100%;
      padding: 0.75rem 1.25rem;
    }

    .modal-content {
      width: 95%;
      max-height: 90vh;
    }

    .modal-header {
      padding: 1.25rem 1.5rem;
    }

    .modal-header h2 {
      font-size: 1.25rem;
    }

    .modal-body {
      padding: 1.5rem;
    }
  }
</style>

<script is:inline>
  const initSubscribeForm = () => {
    const form = document.getElementById('subscribe-form');
    const emailInput = document.getElementById('email-input');
    const submitButton = document.getElementById('subscribe-button');
    const messageDiv = document.getElementById('subscribe-message');
    const pathTrigger = document.getElementById('path-selector-trigger');
    const pathDisplay = document.getElementById('selected-path-display');
    const pathDropdown = document.getElementById('path-selector-dropdown');
    const pathContainer = document.querySelector('.path-selector-container');

    const modal = document.getElementById('subscribe-modal');
    const helpButton = document.getElementById('help-button');
    const modalClose = document.getElementById('modal-close');
    const modalOverlay = document.getElementById('modal-overlay');

    if (!form || !emailInput || !submitButton || !messageDiv || !pathTrigger || !pathDisplay || !pathDropdown || !pathContainer || !modal || !helpButton || !modalClose || !modalOverlay) return;

    // Prevent reinitialization - check if already initialized
    if (form.dataset.initialized === 'true') return;
    form.dataset.initialized = 'true';

    // Ensure modal is hidden initially
    modal.classList.remove('show');
    modal.setAttribute('aria-hidden', 'true');

    // Initialize with default path
    let selectedPath = pathContainer.dataset.defaultPath || '';

    // Enable/disable subscribe button based on path selection
    function updateButtonState() {
      const hasPath = selectedPath !== '';
      submitButton.disabled = !hasPath;

      if (!hasPath) {
        submitButton.title = 'Please select a path first';
      } else {
        submitButton.title = '';
      }
    }

    // Initialize button state
    updateButtonState();

    // Toggle dropdown
    function toggleDropdown() {
      const isOpen = pathDropdown.classList.contains('show');
      if (isOpen) {
        closeDropdown();
      } else {
        openDropdown();
      }
    }

    function openDropdown() {
      pathDropdown.classList.add('show');
      pathDropdown.classList.add('show-upward');
      pathTrigger.classList.add('open');
    }

    function closeDropdown() {
      pathDropdown.classList.remove('show');
      pathDropdown.classList.remove('show-upward');
      pathTrigger.classList.remove('open');
    }

    // Handle path selection
    function selectPath(path) {
      selectedPath = path;
      pathDisplay.textContent = path;

      // Update selected state in dropdown
      const allOptions = pathDropdown.querySelectorAll('.path-option');
      allOptions.forEach(opt => {
        if (opt.dataset.path === path) {
          opt.classList.add('selected');
        } else {
          opt.classList.remove('selected');
        }
      });

      updateButtonState();
      closeDropdown();
    }

    // Event listeners
    pathTrigger.addEventListener('click', toggleDropdown);

    // Keyboard support for accessibility
    pathTrigger.addEventListener('keydown', (e) => {
      if (e.key === 'Enter' || e.key === ' ') {
        e.preventDefault();
        toggleDropdown();
      }
    });

    pathDropdown.querySelectorAll('.path-option').forEach(option => {
      option.addEventListener('click', () => {
        selectPath(option.dataset.path);
      });
    });

    // Close dropdown when clicking outside
    document.addEventListener('click', (e) => {
      if (!pathTrigger.contains(e.target) && !pathDropdown.contains(e.target)) {
        closeDropdown();
      }
    });

    // Close dropdown on Escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && pathDropdown.classList.contains('show')) {
        closeDropdown();
        pathTrigger.focus();
      }
    });

    function showMessage(text, type) {
      messageDiv.textContent = text;
      messageDiv.className = `subscribe-message message show ${type}`;
      if (type === 'success') setTimeout(() => messageDiv.classList.remove('show'), 5000);
    }

    function openModal() {
      modal.classList.add('show');
      modal.setAttribute('aria-hidden', 'false');
      document.body.style.overflow = 'hidden';
    }

    function closeModal() {
      modal.classList.remove('show');
      modal.setAttribute('aria-hidden', 'true');
      document.body.style.overflow = '';
    }

    helpButton.addEventListener('click', openModal);
    modalClose.addEventListener('click', closeModal);
    modalOverlay.addEventListener('click', closeModal);

    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && modal.classList.contains('show')) closeModal();
    });

    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      const email = emailInput.value.trim();
      const path = selectedPath;
      const baseUrl = form.dataset.baseUrl;

      if (!email) {
        showMessage('Please enter your email address', 'error');
        return;
      }

      if (!path) {
        showMessage('Please select a path to subscribe to', 'error');
        return;
      }

      emailInput.disabled = true;
      pathTrigger.style.pointerEvents = 'none';
      pathTrigger.style.opacity = '0.6';
      submitButton.disabled = true;
      submitButton.textContent = 'Subscribing...';

      try {
        const res = await fetch(`${baseUrl}/subscribe`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ email, path })
        });
        const data = await res.json();

        if (res.ok) {
          showMessage(data.message || 'Subscription successful!', 'success');
          emailInput.value = '';
        } else {
          showMessage(data.error || 'Failed to subscribe. Please try again.', 'error');
        }
      } catch {
        showMessage('An error occurred. Please try again later.', 'error');
      } finally {
        emailInput.disabled = false;
        pathTrigger.style.pointerEvents = '';
        pathTrigger.style.opacity = '';
        updateButtonState();
        submitButton.textContent = 'Subscribe';
      }
    });
  };

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initSubscribeForm);
  } else {
    initSubscribeForm();
  }

  document.addEventListener('astro:page-load', initSubscribeForm);
</script>

