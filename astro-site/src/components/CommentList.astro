---
interface Props {
  path: string;
}
const { path } = Astro.props;

const commentsUrl = `https://comments.miquelpuigturon.com${path}.json`;
---

<div class="comments-section" id="comments-section" data-path={path} data-url={commentsUrl}>
  <div class="comments-separator"></div>
  <h3 class="comments-title">Comments</h3>
  <div id="comments-loading" class="comments-loading">Loading comments...</div>
  <div id="comments-error" class="comments-error" style="display: none;"></div>
  <div id="comments-empty" class="comments-empty" style="display: none;">No comments yet.</div>
  <div id="comments-list" class="comments-list" style="display: none;"></div>
</div>

<style is:global>
  .comments-section {
    margin: 3rem 0 1.5rem 0;
    padding: 0;
  }

  .comments-separator {
    height: 1px;
    background: linear-gradient(to right, transparent, #d0d0d0 20%, #d0d0d0 80%, transparent);
    margin: 0 0 1.5rem 0;
  }

  .comments-title {
    font-size: 1.5rem;
    color: #2c3e50;
    margin: 0 0 1rem 0;
    font-weight: 700;
    letter-spacing: -0.02em;
  }

  .comments-loading {
    color: #666;
    font-size: 0.9rem;
    padding: 1rem;
    text-align: center;
  }

  .comments-error {
    background-color: #f8d7da;
    color: #721c24;
    border: 1px solid #f5c6cb;
    padding: 0.75rem;
    border-radius: 4px;
    font-size: 0.9rem;
    margin-bottom: 1rem;
  }

  .comments-list {
    display: flex;
    flex-direction: column;
    gap: 0.85rem;
  }

  .comment {
    background-color: #ffffff;
    border: 1px solid #e8e8e8;
    border-radius: 8px;
    padding: 0.9rem;
    transition: all 0.2s ease;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.04);
  }

  .comment:hover {
    border-color: #d0d0d0;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
    transform: translateY(-1px);
  }

  .comment-header {
    display: flex;
    justify-content: space-between;
    align-items: baseline;
    margin-bottom: 0.5rem;
    gap: 0.75rem;
  }

  .comment-name-wrapper {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    flex-wrap: wrap;
  }

  .comment-name {
    font-weight: 600;
    color: #2c3e50;
    font-size: 1rem;
    letter-spacing: -0.01em;
  }

  .verified-label {
    position: relative;
    display: inline-flex;
    align-items: center;
    padding: 0.2rem 0.6rem;
    background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
    color: white;
    font-size: 0.7rem;
    font-weight: 700;
    border-radius: 12px;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    line-height: 1.3;
    box-shadow: 0 2px 8px rgba(245, 158, 11, 0.3), 0 0 0 1px rgba(255, 255, 255, 0.1) inset;
    transition: all 0.2s ease;
    cursor: help;
  }

  .verified-label::after {
    content: attr(data-tooltip);
    position: absolute;
    bottom: calc(100% + 8px);
    left: 50%;
    transform: translateX(-50%) scale(0.9);
    background: #333;
    color: white;
    padding: 0.5rem 0.75rem;
    border-radius: 6px;
    white-space: nowrap;
    font-size: 0.85rem;
    font-weight: 500;
    text-transform: none;
    letter-spacing: normal;
    opacity: 0;
    pointer-events: none;
    transition: opacity 0.2s ease, transform 0.2s ease;
    z-index: 1000;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  }

  .verified-label:hover::after {
    opacity: 1;
    transform: translateX(-50%) scale(1);
  }

  .comment:hover .verified-label {
    box-shadow: 0 4px 12px rgba(245, 158, 11, 0.4), 0 0 0 1px rgba(255, 255, 255, 0.15) inset;
    transform: translateY(-1px);
  }

  .comment-meta {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.85rem;
    color: #64748b;
    white-space: nowrap;
  }

  .comment-date {
    color: #64748b;
  }

  .comment-separator {
    color: #cbd5e1;
    user-select: none;
  }

  .reply-link {
    color: #64748b;
    font-weight: 500;
    cursor: pointer;
    transition: color 0.15s ease;
    text-decoration: none;
  }

  .reply-link:hover {
    color: #0066cc;
    text-decoration: underline;
  }

  .comment-message {
    color: #475569;
    line-height: 1.6;
    font-size: 0.95rem;
    margin: 0;
    word-wrap: break-word;
    white-space: pre-wrap;
  }

  .nested-comments {
    margin-top: 0.75rem;
    margin-left: 1rem;
    padding-left: 1rem;
    border-left: 3px solid #e8e8e8;
  }

  .nested-comments .comment {
    background-color: #fafafa;
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.03);
  }

  .nested-comments .comment:hover {
    background-color: #ffffff;
  }

  .comments-empty {
    color: #94a3b8;
    font-size: 0.95rem;
    margin-bottom: 1.5rem;
    font-style: italic;
  }

  .reply-form-placeholder {
    margin-top: 0.5rem;
  }

  @media (max-width: 640px) {
    .comments-title {
      font-size: 1.3rem;
    }

    .comment {
      padding: 0.75rem;
    }

    .comment-header {
      flex-direction: column;
      align-items: flex-start;
      gap: 0.4rem;
    }

    .verified-label {
      font-size: 0.65rem;
      padding: 0.15rem 0.5rem;
    }

    .comment-meta {
      font-size: 0.8rem;
    }

    .nested-comments {
      margin-left: 0.6rem;
      padding-left: 0.6rem;
      border-left-width: 2px;
    }
  }
</style>

<script is:inline>
  function initCommentList() {
    const section = document.getElementById('comments-section');
    if (!section) return;

    // Prevent reinitialization - check if already initialized
    if (section.dataset.initialized === 'true') return;
    section.dataset.initialized = 'true';

    const url = section.dataset.url;
    const loading = document.getElementById('comments-loading');
    const error = document.getElementById('comments-error');
    const empty = document.getElementById('comments-empty');
    const list = document.getElementById('comments-list');

    let currentComments = [];

    async function loadComments({ skipCache = false } = {}) {
      try {
        const fetchUrl = skipCache ? `${url}?_=${Date.now()}` : url;
        const response = await fetch(fetchUrl, {
          cache: skipCache ? 'no-cache' : 'default'
        });
        
        // Handle 404 - page doesn't have comments initialized
        if (response.status === 404) {
          // Hide entire comments section
          section.style.display = 'none';
          
          // Hide comment form
          const commentForm = document.getElementById('comment-form-container');
          if (commentForm) {
            commentForm.style.display = 'none';
          }
          
          return;
        }

        if (!response.ok) {
          throw new Error('Failed to load comments');
        }

        const data = await response.json();
        currentComments = data.comments || [];

        loading.style.display = 'none';
        empty.style.display = 'none';
        list.style.display = 'none';

        if (currentComments.length > 0) {
          list.style.display = 'flex';
          displayComments(currentComments);
        } else {
          empty.style.display = 'block';
        }
      } catch (err) {
        console.error('Error loading comments:', err);
        loading.style.display = 'none';
        error.style.display = 'block';
        error.textContent = 'Failed to load comments. Please try again later.';
      }
    }

    function renderComments(comments, parentPath = []) {
      return comments.map((comment, index) => {
        const currentPath = [...parentPath, index];
        const date = new Date(comment.created_at);
        const formattedDate = date.toLocaleDateString('en-US', {
          year: 'numeric',
          month: 'short',
          day: 'numeric',
          hour: '2-digit',
          minute: '2-digit'
        });

        const nestedComments = comment.comments && comment.comments.length > 0
          ? `<div class="nested-comments">${renderComments(comment.comments, currentPath)}</div>`
          : '';

        const verifiedLabel = comment.verifiedLabel
          ? `<span class="verified-label" data-tooltip="This commenter has been verified">${escapeHtml(comment.verifiedLabel)}</span>`
          : '';

        return `
          <div class="comment" data-comment-path="${JSON.stringify(currentPath)}">
            <div class="comment-header">
              <div class="comment-name-wrapper">
                <span class="comment-name">${escapeHtml(comment.name)}</span>
                ${verifiedLabel}
              </div>
              <div class="comment-meta">
                <span class="comment-date">${formattedDate}</span>
                <span class="comment-separator">â€¢</span>
                <a class="reply-link" onclick="window.replyToComment(${JSON.stringify(currentPath)})">Reply</a>
              </div>
            </div>
            <p class="comment-message">${escapeHtml(comment.message)}</p>
            <div class="reply-form-placeholder" data-path="${JSON.stringify(currentPath)}"></div>
            ${nestedComments}
          </div>
        `;
      }).join('');
    }

    function displayComments(comments) {
      list.innerHTML = renderComments(comments);
    }

    function escapeHtml(text) {
      // First decode any existing HTML entities
      const textarea = document.createElement('textarea');
      textarea.innerHTML = text;
      const decoded = textarea.value;

      // Then escape for safe display
      const div = document.createElement('div');
      div.textContent = decoded;
      return div.innerHTML;
    }

    function insertCommentAtPath(comments, parentPath, newComment) {
      if (parentPath.length === 0) {
        // Top-level comment
        return [...comments, newComment];
      }

      // Navigate to parent comment
      const [first, ...rest] = parentPath;
      const updatedComments = [...comments];

      if (first >= updatedComments.length) {
        return comments;
      }

      if (rest.length === 0) {
        // Insert as child of this comment
        updatedComments[first] = {
          ...updatedComments[first],
          comments: [...(updatedComments[first].comments || []), newComment]
        };
      } else {
        // Recurse deeper
        updatedComments[first] = {
          ...updatedComments[first],
          comments: insertCommentAtPath(updatedComments[first].comments || [], rest, newComment)
        };
      }

      return updatedComments;
    }

    function addCommentOptimistically(name, message, parentPath = []) {
      const newComment = {
        name,
        message,
        created_at: new Date().toISOString(),
        comments: []
      };

      currentComments = insertCommentAtPath(currentComments, parentPath, newComment);

      // Update UI
      empty.style.display = 'none';
      list.style.display = 'flex';
      displayComments(currentComments);
    }

    // Expose functions for optimistic updates
    window.refreshComments = () => loadComments({ skipCache: true });
    window.addCommentOptimistically = addCommentOptimistically;

    loadComments();
  }

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initCommentList);
  } else {
    initCommentList();
  }

  document.addEventListener('astro:page-load', initCommentList);
</script>

