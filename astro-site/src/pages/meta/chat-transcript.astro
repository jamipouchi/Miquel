---
import '../../styles/global.css';
import CommonHead from '../../components/CommonHead.astro';
import CommentList from '../../components/CommentList.astro';
import CommentForm from '../../components/CommentForm.astro';
import Content from '../../content/pages/chat-transcript.md';
---

<html lang="en">
  <head>
    <CommonHead title="Chat Transcript" />
  </head>
  <body>
    <article class="prose chat-transcript">
      <Content />
      
      <div class="comments-section">
        <CommentList path="/meta/chat-transcript" />
        <CommentForm path="/meta/chat-transcript" />
      </div>
    </article>
  </body>
</html>

<script>
  // Make User/Cursor messages collapsible using HR as boundaries
  document.addEventListener('DOMContentLoaded', () => {
    const article = document.querySelector('.chat-transcript');
    if (!article) return;

    const children = Array.from(article.children);
    const sections: { type: string; elements: Element[] }[] = [];
    let currentSection: { type: string; elements: Element[] } | null = null;

    for (let i = 0; i < children.length; i++) {
      const el = children[i];
      
      // Stop processing if we hit the comments section
      if (el.classList?.contains('comments-section')) {
        if (currentSection) {
          sections.push(currentSection);
          currentSection = null;
        }
        break;
      }
      
      // HR marks the start of a new section
      if (el.tagName === 'HR') {
        if (currentSection) {
          sections.push(currentSection);
        }
        
        // Next element should be the User/Cursor marker
        const nextEl = children[i + 1];
        if (nextEl?.tagName === 'P') {
          const strong = nextEl.querySelector('strong');
          const type = strong?.textContent?.trim();
          if (type === 'User' || type === 'Cursor') {
            currentSection = {
              type,
              elements: [el, nextEl] // Include the HR and header
            };
            i++; // Skip the header paragraph
            continue;
          }
        }
        currentSection = null;
      } else if (currentSection) {
        // Add element to current section
        currentSection.elements.push(el);
      }
    }
    
    if (currentSection) {
      sections.push(currentSection);
    }

    // Convert sections to collapsible
    sections.forEach((section) => {
      const wrapper = document.createElement('details');
      wrapper.className = 'chat-section';
      wrapper.open = section.type === 'User'; // Cursor messages collapsed by default
      
      const summary = document.createElement('summary');
      summary.className = 'chat-header';
      summary.textContent = section.type;
      
      const contentDiv = document.createElement('div');
      contentDiv.className = 'chat-content';
      
      // Move all elements (except HR and header) into the content div
      section.elements.slice(2).forEach(el => {
        contentDiv.appendChild(el);
      });
      
      // Remove the HR and header
      section.elements[0].remove(); // HR
      section.elements[1].replaceWith(wrapper); // Replace header with details
      
      wrapper.appendChild(summary);
      wrapper.appendChild(contentDiv);
    });
  });
</script>

<style>
  .comments-section {
    margin-top: 3rem;
  }

  .chat-section {
    margin: 1.5rem 0;
    border: 1px solid #e0e0e0;
    border-radius: 8px;
    overflow: hidden;
  }

  .chat-header {
    padding: 1rem 1.25rem;
    background-color: #f8f9fa;
    cursor: pointer;
    font-weight: 600;
    font-size: 0.9rem;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    color: #0066cc;
    user-select: none;
    transition: background-color 0.2s ease;
  }

  .chat-header:hover {
    background-color: #e9ecef;
  }

  details[open] .chat-header {
    border-bottom: 1px solid #e0e0e0;
  }

  .chat-content {
    padding: 1.25rem;
  }

  .chat-content > *:first-child {
    margin-top: 0;
  }

  .chat-content > *:last-child {
    margin-bottom: 0;
  }
</style>

